/**
 * ÂÜúÊÉÖÈÅ•ÊÑüÁ≥ªÁªüÁÆ°ÁêÜÁ´Ø - Ê∞îË±°Êï∞ÊçÆÁÆ°ÁêÜÂäüËÉΩ
 * ÂäüËÉΩÔºöÊ∞îË±°Êï∞ÊçÆÂ±ïÁ§∫„ÄÅÊ∞îË±°Á´ôÁõëÊéß„ÄÅÊï∞ÊçÆË¥®ÈáèÁÆ°ÁêÜÁ≠â
 */

// ===== ÂÖ®Â±ÄÂèòÈáè =====
let currentPage = 1;
let pageSize = 20;
let totalRecords = 1542;
let currentSort = { field: 'datetime', order: 'desc' };
let selectedRows = new Set();
let weatherData = [];
let filteredData = [];
let stationData = [];
let currentChart = 'temperature';
let charts = {};
let currentViewMode = 'grid'; // ÂΩìÂâçËßÜÂõæÊ®°ÂºèÔºö'grid' Êàñ 'list'

// ===== È°µÈù¢Âä†ËΩΩÂÆåÊàêÂêéÂàùÂßãÂåñ =====
document.addEventListener('DOMContentLoaded', function() {
    initializeWeatherPage();
});

/**
 * È°µÈù¢ÂàùÂßãÂåñ
 */
function initializeWeatherPage() {
    console.log('üå§Ô∏è ÂàùÂßãÂåñÊ∞îË±°Êï∞ÊçÆÁÆ°ÁêÜÈ°µÈù¢...');
    
    // ÊÅ¢Â§çËßÜÂõæÊ®°ÂºèËÆæÁΩÆ
    const savedViewMode = localStorage.getItem('weatherDataViewMode');
    if (savedViewMode && ['list', 'grid'].includes(savedViewMode)) {
        currentViewMode = savedViewMode;
    }
    
    // ÁîüÊàêÊ®°ÊãüÊï∞ÊçÆ
    generateMockData();
    
    // ÂàùÂßãÂåñÂõæË°®
    initializeCharts();
    
    // Ê∏≤ÊüìÈ°µÈù¢ÂÜÖÂÆπ
    renderComprehensiveDashboard();
    renderQualityMonitor();
    
    // ÁªëÂÆö‰∫ã‰ª∂
    bindEvents();
    
    // ÂºÄÂßãÂÆûÊó∂Êõ¥Êñ∞
    startRealTimeUpdate();
    
    // Êõ¥Êñ∞ËßÜÂõæÂàáÊç¢ÊåâÈíÆÁä∂ÊÄÅ
    updateViewToggleButtons();
    
    console.log('‚úÖ Ê∞îË±°Êï∞ÊçÆÁÆ°ÁêÜÈ°µÈù¢ÂàùÂßãÂåñÂÆåÊàê');
    console.log(`üå§Ô∏è ÂΩìÂâçËßÜÂõæÊ®°Âºè: ${currentViewMode}`);
}

// ===== Êï∞ÊçÆÁîüÊàêÂíåÁÆ°ÁêÜ =====

/**
 * ÁîüÊàêÊ®°ÊãüÊï∞ÊçÆ
 */
function generateMockData() {
    const stations = [
        { id: 'station_001', name: '‰∏¥Â§è‰∏ªÁ´ô', location: '‰∏¥Â§èÂ∏Ç', status: 'online' },
        { id: 'station_002', name: 'Â∫∑‰πêÂàÜÁ´ô', location: 'Â∫∑‰πêÂéø', status: 'online' },
        { id: 'station_003', name: 'ÂíåÊîøÂàÜÁ´ô', location: 'ÂíåÊîøÂéø', status: 'maintenance' },
        { id: 'station_004', name: 'ÁßØÁü≥Â±±ÂàÜÁ´ô', location: 'ÁßØÁü≥Â±±Âéø', status: 'online' },
        { id: 'station_005', name: 'Ê∞∏ÈùñÂàÜÁ´ô', location: 'Ê∞∏ÈùñÂéø', status: 'offline' }
    ];
    
    stationData = stations.map(station => {
        const baseTemp = 18 + Math.random() * 10; // 18-28Â∫¶Âü∫ÂáÜÊ∏©Â∫¶
        const baseHumidity = 50 + Math.random() * 30; // 50-80%Âü∫ÂáÜÊπøÂ∫¶
        
        return {
            ...station,
            currentData: {
                temperature: baseTemp + (Math.random() - 0.5) * 4,
                humidity: baseHumidity + (Math.random() - 0.5) * 10,
                rainfall: Math.random() * 5,
                windspeed: Math.random() * 8 + 1,
                pressure: 1000 + Math.random() * 50,
                radiation: Math.random() * 800 + 200
            },
            lastUpdate: new Date(Date.now() - Math.random() * 3600000) // ËøáÂéª1Â∞èÊó∂ÂÜÖ
        };
    });
    
    // ÁîüÊàêÊ∞îË±°ËßÇÊµãÊï∞ÊçÆ
    weatherData = [];
    const now = new Date();
    
    for (let i = 0; i < totalRecords; i++) {
        const station = stations[Math.floor(Math.random() * stations.length)];
        const datetime = new Date(now.getTime() - Math.random() * 30 * 24 * 60 * 60 * 1000); // ËøáÂéª30Â§©
        
        // Ê®°Êãü‰∏ÄÂ§©‰∏≠ÁöÑÊ∏©Â∫¶ÂèòÂåñ
        const hour = datetime.getHours();
        const baseTemp = 15 + 10 * Math.sin((hour - 6) * Math.PI / 12); // Ê≠£Âº¶Ê≥¢Ê®°ÊãüÊó•Ê∏©Â∫¶ÂèòÂåñ
        
        const data = {
            id: `weather_${String(i + 1).padStart(6, '0')}`,
            stationId: station.id,
            stationName: station.name,
            datetime: datetime,
            temperature: Math.max(-10, Math.min(40, baseTemp + (Math.random() - 0.5) * 6)),
            humidity: Math.max(20, Math.min(100, 60 + (Math.random() - 0.5) * 40)),
            rainfall: Math.random() < 0.3 ? Math.random() * 20 : 0, // 30%Ê¶ÇÁéáÊúâÈôçÈõ®
            windspeed: Math.max(0, Math.random() * 12),
            pressure: Math.max(980, Math.min(1040, 1013 + (Math.random() - 0.5) * 30)),
            radiation: Math.max(0, Math.random() * 1000),
            quality: 70 + Math.random() * 30 // 70-100Ë¥®ÈáèÂàÜÊï∞
        };
        
        weatherData.push(data);
    }
    
    // ÊåâÊó∂Èó¥ÊéíÂ∫è
    weatherData.sort((a, b) => b.datetime - a.datetime);
    filteredData = [...weatherData];
    
    console.log(`üìä ÁîüÊàê‰∫Ü ${weatherData.length} Êù°Ê∞îË±°ËßÇÊµãÊï∞ÊçÆ`);
    console.log(`üè™ ÁîüÊàê‰∫Ü ${stationData.length} ‰∏™Ê∞îË±°Á´ôÊï∞ÊçÆ`);
}

// ===== ÂõæË°®ÂàùÂßãÂåñ =====

/**
 * ÂàùÂßãÂåñÂõæË°®
 */
function initializeCharts() {
    initializeWeatherTrendChart();
    initializeMiniCharts();
}

/**
 * ÂàùÂßãÂåñÊ∞îË±°Ë∂ãÂäøÂõæË°®
 */
function initializeWeatherTrendChart() {
    const chartDom = document.getElementById('weatherTrendChart');
    if (!chartDom) return;
    
    charts.weatherTrend = echarts.init(chartDom);
    updateWeatherTrendChart(currentChart);
}

/**
 * ÂàùÂßãÂåñËø∑‰Ω†ÂõæË°®
 */
function initializeMiniCharts() {
    const chartIds = ['temperatureChart', 'humidityChart', 'rainfallChart', 'windSpeedChart'];
    
    chartIds.forEach(chartId => {
        const chartDom = document.getElementById(chartId);
        if (!chartDom) return;
        
        charts[chartId] = echarts.init(chartDom);
        updateMiniChart(chartId);
    });
}

/**
 * Êõ¥Êñ∞Ê∞îË±°Ë∂ãÂäøÂõæË°®
 */
function updateWeatherTrendChart(dataType) {
    if (!charts.weatherTrend) return;
    
    // Ëé∑ÂèñËøáÂéª7Â§©ÁöÑÊï∞ÊçÆ
    const endDate = new Date();
    const startDate = new Date(endDate.getTime() - 7 * 24 * 60 * 60 * 1000);
    
    const recentData = weatherData.filter(item => 
        item.datetime >= startDate && item.datetime <= endDate
    );
    
    // ÊåâÂ§©ÂàÜÁªÑÂπ∂ËÆ°ÁÆóÂπ≥ÂùáÂÄº
    const dailyData = {};
    recentData.forEach(item => {
        const dateKey = item.datetime.toDateString();
        if (!dailyData[dateKey]) {
            dailyData[dateKey] = { values: [], date: item.datetime };
        }
        dailyData[dateKey].values.push(item[dataType]);
    });
    
    const timeLabels = [];
    const values = [];
    
    Object.keys(dailyData).sort().forEach(dateKey => {
        const dayData = dailyData[dateKey];
        const avgValue = dayData.values.reduce((a, b) => a + b, 0) / dayData.values.length;
        
        timeLabels.push(dayData.date.toLocaleDateString('zh-CN', { month: 'short', day: 'numeric' }));
        values.push(avgValue.toFixed(1));
    });
    
    const colorMap = {
        temperature: '#FF6B35',
        humidity: '#2196F3',
        rainfall: '#607D8B',
        windspeed: '#4CAF50'
    };
    
    const unitMap = {
        temperature: '¬∞C',
        humidity: '%',
        rainfall: 'mm',
        windspeed: 'm/s'
    };
    
    const nameMap = {
        temperature: 'Ê∏©Â∫¶',
        humidity: 'ÊπøÂ∫¶',
        rainfall: 'ÈôçÈõ®Èáè',
        windspeed: 'È£éÈÄü'
    };
    
    const option = {
        title: {
            show: false
        },
        tooltip: {
            trigger: 'axis',
            backgroundColor: 'rgba(50, 50, 50, 0.9)',
            borderColor: colorMap[dataType],
            borderWidth: 1,
            textStyle: {
                color: '#fff',
                fontSize: 12
            },
            formatter: function(params) {
                const param = params[0];
                return `
                    <div style="font-weight: bold; margin-bottom: 8px;">${param.axisValue}</div>
                    <div style="display: flex; align-items: center;">
                        <span style="display: inline-block; width: 10px; height: 10px; border-radius: 50%; background: ${param.color}; margin-right: 8px;"></span>
                        <span style="margin-right: 16px;">${nameMap[dataType]}:</span>
                        <span style="font-weight: bold;">${param.value} ${unitMap[dataType]}</span>
                    </div>
                `;
            }
        },
        grid: {
            left: '3%',
            right: '4%',
            bottom: '8%',
            top: '5%',
            containLabel: true
        },
        xAxis: {
            type: 'category',
            boundaryGap: false,
            data: timeLabels,
            axisLine: {
                lineStyle: {
                    color: '#E0E4E7'
                }
            },
            axisLabel: {
                color: '#718096',
                fontSize: 11
            }
        },
        yAxis: {
            type: 'value',
            name: unitMap[dataType],
            nameTextStyle: {
                color: '#718096',
                fontSize: 11
            },
            axisLine: {
                lineStyle: {
                    color: '#E0E4E7'
                }
            },
            axisLabel: {
                color: '#718096',
                fontSize: 11
            },
            splitLine: {
                lineStyle: {
                    color: '#F0F2F5',
                    type: 'dashed'
                }
            }
        },
        series: [
            {
                name: nameMap[dataType],
                type: 'line',
                smooth: true,
                symbol: 'circle',
                symbolSize: 6,
                lineStyle: {
                    width: 3,
                    color: colorMap[dataType]
                },
                itemStyle: {
                    color: colorMap[dataType],
                    borderWidth: 2,
                    borderColor: '#fff'
                },
                areaStyle: {
                    color: {
                        type: 'linear',
                        x: 0, y: 0, x2: 0, y2: 1,
                        colorStops: [
                            { offset: 0, color: colorMap[dataType] + '40' },
                            { offset: 1, color: colorMap[dataType] + '10' }
                        ]
                    }
                },
                data: values
            }
        ]
    };
    
    charts.weatherTrend.setOption(option, true);
}

/**
 * Êõ¥Êñ∞Ëø∑‰Ω†ÂõæË°®
 */
function updateMiniChart(chartId) {
    const chart = charts[chartId];
    if (!chart) return;
    
    // ÁîüÊàêËøáÂéª24Â∞èÊó∂ÁöÑÊï∞ÊçÆ
    const hours = [];
    const values = [];
    
    for (let i = 23; i >= 0; i--) {
        const time = new Date(Date.now() - i * 60 * 60 * 1000);
        hours.push(time.getHours());
        
        // Ê†πÊçÆÂõæË°®Á±ªÂûãÁîüÊàê‰∏çÂêåÁöÑÊ®°ÊãüÊï∞ÊçÆ
        let value;
        switch(chartId) {
            case 'temperatureChart':
                value = 15 + 10 * Math.sin((time.getHours() - 6) * Math.PI / 12) + Math.random() * 2;
                break;
            case 'humidityChart':
                value = 60 + Math.random() * 20;
                break;
            case 'rainfallChart':
                value = Math.random() < 0.1 ? Math.random() * 5 : 0;
                break;
            case 'windSpeedChart':
                value = 2 + Math.random() * 4;
                break;
            default:
                value = Math.random() * 100;
        }
        values.push(value.toFixed(1));
    }
    
    const colorMap = {
        temperatureChart: '#FF6B35',
        humidityChart: '#2196F3', 
        rainfallChart: '#607D8B',
        windSpeedChart: '#4CAF50'
    };
    
    const option = {
        grid: {
            left: 0,
            right: 0,
            bottom: 0,
            top: 0
        },
        xAxis: {
            type: 'category',
            show: false,
            data: hours
        },
        yAxis: {
            type: 'value',
            show: false
        },
        series: [
            {
                type: 'line',
                smooth: true,
                symbol: 'none',
                lineStyle: {
                    width: 2,
                    color: colorMap[chartId]
                },
                areaStyle: {
                    color: {
                        type: 'linear',
                        x: 0, y: 0, x2: 0, y2: 1,
                        colorStops: [
                            { offset: 0, color: colorMap[chartId] + '60' },
                            { offset: 1, color: colorMap[chartId] + '10' }
                        ]
                    }
                },
                data: values
            }
        ]
    };
    
    chart.setOption(option);
}

// ===== È°µÈù¢Ê∏≤Êüì =====

/**
 * Ê∏≤ÊüìÁªºÂêàÊ∞îË±°ÁõëÊµãÁúãÊùø
 */
function renderComprehensiveDashboard() {
    renderKeyMetrics();
    renderStationList();
    renderDashboardSummary();
    
    console.log('üåà ÁªºÂêàÊ∞îË±°ÁõëÊµãÁúãÊùøÂ∑≤Ê∏≤Êüì');
}

/**
 * Ê∏≤ÊüìÊ†∏ÂøÉÊåáÊ†áÂç°Áâá
 */
function renderKeyMetrics() {
    // ËÆ°ÁÆóÊ∏©Â∫¶ÁªüËÆ°
    const temperatures = stationData.map(station => station.currentData.temperature);
    const tempMin = Math.min(...temperatures);
    const tempMax = Math.max(...temperatures);
    const tempAvg = temperatures.reduce((sum, temp) => sum + temp, 0) / temperatures.length;
    
    // ËÆ°ÁÆóÊπøÂ∫¶ÁªüËÆ°
    const humidities = stationData.map(station => station.currentData.humidity);
    const humidityMin = Math.min(...humidities);
    const humidityMax = Math.max(...humidities);
    const humidityAvg = humidities.reduce((sum, humidity) => sum + humidity, 0) / humidities.length;
    
    // Êõ¥Êñ∞Ê∏©Â∫¶ÊåáÊ†á
    const tempMinEl = document.getElementById('tempMin');
    const tempMaxEl = document.getElementById('tempMax');
    const tempAvgEl = document.getElementById('tempAvg');
    
    if (tempMinEl) tempMinEl.textContent = `${tempMin.toFixed(1)}¬∞C`;
    if (tempMaxEl) tempMaxEl.textContent = `${tempMax.toFixed(1)}¬∞C`;
    if (tempAvgEl) tempAvgEl.textContent = `${tempAvg.toFixed(1)}¬∞C`;
    
    // Êõ¥Êñ∞ÊπøÂ∫¶ÊåáÊ†á
    const humidityMinEl = document.getElementById('humidityMin');
    const humidityMaxEl = document.getElementById('humidityMax');
    const humidityAvgEl = document.getElementById('humidityAvg');
    
    if (humidityMinEl) humidityMinEl.textContent = `${Math.round(humidityMin)}%`;
    if (humidityMaxEl) humidityMaxEl.textContent = `${Math.round(humidityMax)}%`;
    if (humidityAvgEl) humidityAvgEl.textContent = `${Math.round(humidityAvg)}%`;
    
    // ÂàùÂßãÂåñËø∑‰Ω†ÂõæË°®
    initializeMiniCharts();
}

/**
 * Ê∏≤ÊüìÊ∞îË±°Á´ôÁä∂ÊÄÅÂàóË°®
 */
function renderStationList() {
    const stationListEl = document.getElementById('stationList');
    const stationStatusEl = document.getElementById('stationStatus');
    
    if (!stationListEl) return;
    
    // Êõ¥Êñ∞Âú®Á∫øÁä∂ÊÄÅÁªüËÆ°
    const onlineCount = stationData.filter(station => station.status === 'online').length;
    if (stationStatusEl) {
        stationStatusEl.textContent = `${onlineCount}/${stationData.length}`;
    }
    
    // Ê∏≤ÊüìÊ∞îË±°Á´ôÂàóË°®
    stationListEl.innerHTML = stationData.map(station => {
        const timeDiff = Math.floor((Date.now() - station.lastUpdate) / 60000);
        
        return `
            <div class="station-item" onclick="viewStationDetails('${station.id}')">
                <div class="station-status-dot ${station.status}"></div>
                <div class="station-item-info">
                    <div class="station-item-name">${station.name}</div>
                    <div class="station-item-location">
                            <i class="fas fa-map-marker-alt"></i>
                            ${station.location}
                        </div>
                    </div>
                <div class="station-item-data">
                    <div class="station-temp">${station.currentData.temperature.toFixed(1)}¬∞C</div>
                    <div>${timeDiff}ÂàÜÈíüÂâç</div>
                </div>
            </div>
        `;
    }).join('');
}

/**
 * Ê∏≤ÊüìÁúãÊùøÊ±áÊÄª‰ø°ÊÅØ
 */
function renderDashboardSummary() {
    const totalRainfall = stationData.reduce((sum, station) => sum + station.currentData.rainfall, 0);
    const maxWindSpeed = Math.max(...stationData.map(station => station.currentData.windspeed));
    const onlineStations = stationData.filter(station => station.status === 'online').length;
    const dataQuality = onlineStations === stationData.length ? '‰ºò' : onlineStations > stationData.length * 0.8 ? 'ËâØ' : '‰∏ÄËà¨';
    const alertCount = stationData.filter(station => station.status === 'offline').length;
    
    // Êõ¥Êñ∞Ê±áÊÄª‰ø°ÊÅØ
    const totalRainfallEl = document.getElementById('totalRainfall');
    const maxWindSpeedEl = document.getElementById('maxWindSpeed');
    const dataQualityEl = document.getElementById('dataQuality');
    const alertCountEl = document.getElementById('alertCount');
    
    if (totalRainfallEl) totalRainfallEl.textContent = `${totalRainfall.toFixed(1)}mm`;
    if (maxWindSpeedEl) maxWindSpeedEl.textContent = `${maxWindSpeed.toFixed(1)}m/s`;
    if (dataQualityEl) {
        dataQualityEl.textContent = dataQuality;
        dataQualityEl.className = `summary-value quality-${dataQuality === '‰ºò' ? 'good' : 'normal'}`;
    }
    if (alertCountEl) alertCountEl.textContent = alertCount;
}







/**
 * Ê∏≤ÊüìÊï∞ÊçÆË¥®ÈáèÁõëÊéß
 */
function renderQualityMonitor() {
    // ËÆ°ÁÆóË¥®ÈáèÁªüËÆ°
    const totalRecords = filteredData.length;
    const normalData = filteredData.filter(item => item.quality >= 80).length;
    const warningData = filteredData.filter(item => item.quality >= 60 && item.quality < 80).length;
    const errorData = filteredData.filter(item => item.quality < 60).length;
    const delayedData = Math.floor(totalRecords * 0.008); // Ê®°ÊãüÂª∂ËøüÊï∞ÊçÆ
    
    // Êõ¥Êñ∞ÊòæÁ§∫
    const qualityCards = document.querySelectorAll('.quality-card');
    if (qualityCards.length >= 4) {
        // Ê≠£Â∏∏Êï∞ÊçÆ
        const normalCard = qualityCards[0];
        normalCard.querySelector('.quality-value').textContent = ((normalData / totalRecords) * 100).toFixed(1) + '%';
        normalCard.querySelector('.quality-count').textContent = normalData + ' Êù°ËÆ∞ÂΩï';
        
        // ÂºÇÂ∏∏Êï∞ÊçÆ
        const warningCard = qualityCards[1];
        warningCard.querySelector('.quality-value').textContent = ((warningData / totalRecords) * 100).toFixed(1) + '%';
        warningCard.querySelector('.quality-count').textContent = warningData + ' Êù°ËÆ∞ÂΩï';
        
        // Áº∫Â§±Êï∞ÊçÆ
        const errorCard = qualityCards[2];
        errorCard.querySelector('.quality-value').textContent = ((errorData / totalRecords) * 100).toFixed(1) + '%';
        errorCard.querySelector('.quality-count').textContent = errorData + ' Êù°ËÆ∞ÂΩï';
        
        // Âª∂ËøüÊï∞ÊçÆ
        const delayCard = qualityCards[3];
        delayCard.querySelector('.quality-value').textContent = ((delayedData / totalRecords) * 100).toFixed(1) + '%';
        delayCard.querySelector('.quality-count').textContent = delayedData + ' Êù°ËÆ∞ÂΩï';
    }
}

// ===== Â∑•ÂÖ∑ÂáΩÊï∞ =====

/**
 * Ëé∑ÂèñÊ∏©Â∫¶Ê†∑ÂºèÁ±ª
 */
function getTemperatureClass(temp) {
    if (temp > 30) return 'hot';
    if (temp < 5) return 'cold';
    return '';
}

/**
 * Ëé∑ÂèñÊπøÂ∫¶Ê†∑ÂºèÁ±ª
 */
function getHumidityClass(humidity) {
    if (humidity > 80) return 'high';
    if (humidity < 30) return 'low';
    return '';
}

/**
 * Ëé∑ÂèñÈôçÈõ®ÈáèÊ†∑ÂºèÁ±ª
 */
function getRainfallClass(rainfall) {
    if (rainfall > 10) return 'heavy';
    if (rainfall < 0.1) return 'light';
    return '';
}

/**
 * Ëé∑ÂèñÈ£éÈÄüÊ†∑ÂºèÁ±ª
 */
function getWindSpeedClass(windspeed) {
    if (windspeed > 6) return 'strong';
    if (windspeed < 1) return 'calm';
    return '';
}

/**
 * Ëé∑ÂèñË¥®ÈáèÁ≠âÁ∫ß
 */
function getQualityLevel(quality) {
    if (quality >= 90) return 'excellent';
    if (quality >= 75) return 'good';
    if (quality >= 60) return 'fair';
    return 'poor';
}



// ===== ‰∫ã‰ª∂ÁªëÂÆö =====

/**
 * ÁªëÂÆö‰∫ã‰ª∂
 */
function bindEvents() {
    // Á™óÂè£Â§ßÂ∞èÂèòÂåñÊó∂ÈáçÊñ∞Ë∞ÉÊï¥ÂõæË°®
    window.addEventListener('resize', debounce(() => {
        Object.values(charts).forEach(chart => {
            if (chart && chart.resize) {
                chart.resize();
            }
        });
    }, 200));
}

// ===== ÂäüËÉΩÂáΩÊï∞ =====











// ===== Ê∞îË±°Á´ôÊìç‰Ωú =====

/**
 * Êü•ÁúãÊ∞îË±°Á´ôËØ¶ÊÉÖ
 */
function viewStationDetails(stationId) {
    const station = stationData.find(s => s.id === stationId);
    if (!station) {
        showNotification('Ê∞îË±°Á´ô‰∏çÂ≠òÂú®', 'error');
        return;
    }
    
    // ÈòªÊ≠¢‰∫ã‰ª∂ÂÜíÊ≥°ÔºàÂΩìÁÇπÂáªÊåâÈíÆÊó∂Ôºâ
    if (event) {
        event.stopPropagation();
    }
    
    // Â°´ÂÖÖÂü∫Êú¨‰ø°ÊÅØ
    document.getElementById('detailStationName').textContent = station.name;
    document.getElementById('detailStationId').textContent = station.id;
    document.getElementById('detailStationLocation').textContent = station.location;
    
    // ËÆæÁΩÆÁä∂ÊÄÅ
    const statusElement = document.getElementById('detailStationStatus');
    const statusText = {
        online: 'Âú®Á∫ø',
        offline: 'Á¶ªÁ∫ø', 
        maintenance: 'Áª¥Êä§‰∏≠'
    }[station.status];
    statusElement.textContent = statusText;
    statusElement.className = `status-badge ${station.status}`;
    
    // ËÆæÁΩÆÊúÄÂêéÊõ¥Êñ∞Êó∂Èó¥
    const timeDiff = Math.floor((Date.now() - station.lastUpdate) / 60000);
    document.getElementById('detailLastUpdate').textContent = `${timeDiff}ÂàÜÈíüÂâç`;
    
    // Â°´ÂÖÖÂÆûÊó∂Êï∞ÊçÆ
    const data = station.currentData;
    document.getElementById('detailTemperature').textContent = `${data.temperature.toFixed(1)}¬∞C`;
    document.getElementById('detailHumidity').textContent = `${Math.round(data.humidity)}%`;
    document.getElementById('detailRainfall').textContent = `${data.rainfall.toFixed(1)}mm`;
    document.getElementById('detailWindspeed').textContent = `${data.windspeed.toFixed(1)}m/s`;
    document.getElementById('detailPressure').textContent = `${data.pressure.toFixed(1)}hPa`;
    document.getElementById('detailRadiation').textContent = `${Math.round(data.radiation)}W/m¬≤`;
    
    // ÂàùÂßãÂåñË∂ãÂäøÂõæË°®
    initializeStationTrendChart(stationId);
    
    // ÊòæÁ§∫Ê®°ÊÄÅÊ°Ü
    const modal = document.getElementById('stationDetailModal');
    if (modal) {
        modal.classList.add('show');
        document.body.style.overflow = 'hidden'; // Èò≤Ê≠¢ËÉåÊôØÊªöÂä®
    }
    
    console.log(`üå§Ô∏è ÊòæÁ§∫Ê∞îË±°Á´ôËØ¶ÊÉÖ: ${station.name}`);
}

/**
 * ÂÖ≥Èó≠Ê∞îË±°Á´ôËØ¶ÊÉÖÊ®°ÊÄÅÊ°Ü
 */
function closeStationDetailModal() {
    const modal = document.getElementById('stationDetailModal');
    if (modal) {
        modal.classList.remove('show');
        document.body.style.overflow = 'auto'; // ÊÅ¢Â§çËÉåÊôØÊªöÂä®
    }
    
    // ÈîÄÊØÅÂõæË°®‰ª•ÈáäÊîæËµÑÊ∫ê
    if (charts.stationTrend) {
        charts.stationTrend.dispose();
        delete charts.stationTrend;
    }
}

/**
 * ÂàùÂßãÂåñÊ∞îË±°Á´ôË∂ãÂäøÂõæË°®
 */
function initializeStationTrendChart(stationId) {
    const chartDom = document.getElementById('stationTrendChart');
    if (!chartDom) return;
    
    // Â¶ÇÊûúÂõæË°®Â∑≤Â≠òÂú®ÔºåÂÖàÈîÄÊØÅ
    if (charts.stationTrend) {
        charts.stationTrend.dispose();
    }
    
    charts.stationTrend = echarts.init(chartDom);
    
    // ÁîüÊàêËøáÂéª24Â∞èÊó∂ÁöÑÊ®°ÊãüÊï∞ÊçÆ
    const hours = [];
    const temperatureData = [];
    const humidityData = [];
    const rainfallData = [];
    const windspeedData = [];
    
    for (let i = 23; i >= 0; i--) {
        const time = new Date(Date.now() - i * 60 * 60 * 1000);
        hours.push(time.getHours() + ':00');
        
        // ÁîüÊàêÊ®°ÊãüÊï∞ÊçÆÔºåÂü∫‰∫éÊó∂Èó¥ÁöÑÂèòÂåñ
        const hour = time.getHours();
        temperatureData.push((15 + 10 * Math.sin((hour - 6) * Math.PI / 12) + Math.random() * 2).toFixed(1));
        humidityData.push(Math.round(60 + Math.random() * 20));
        rainfallData.push((Math.random() < 0.1 ? Math.random() * 3 : 0).toFixed(1));
        windspeedData.push((2 + Math.random() * 4).toFixed(1));
    }
    
    const option = {
        title: {
            show: false
        },
        tooltip: {
            trigger: 'axis',
            backgroundColor: 'rgba(50, 50, 50, 0.9)',
            borderColor: '#667eea',
            borderWidth: 1,
            textStyle: {
                color: '#fff',
                fontSize: 12
            },
            axisPointer: {
                type: 'cross',
                crossStyle: {
                    color: '#999'
                }
            }
        },
        legend: {
            data: ['Ê∏©Â∫¶', 'ÊπøÂ∫¶', 'ÈôçÈõ®Èáè', 'È£éÈÄü'],
            top: '5%',
            textStyle: {
                color: '#64748B',
                fontSize: 12
            }
        },
        grid: {
            left: '5%',
            right: '5%',
            bottom: '10%',
            top: '20%',
            containLabel: true
        },
        xAxis: [
            {
                type: 'category',
                boundaryGap: false,
                data: hours,
                axisPointer: {
                    type: 'shadow'
                },
                axisLine: {
                    lineStyle: {
                        color: '#E2E8F0'
                    }
                },
                axisLabel: {
                    color: '#64748B',
                    fontSize: 11
                }
            }
        ],
        yAxis: [
            {
                type: 'value',
                name: 'Ê∏©Â∫¶(¬∞C) / È£éÈÄü(m/s)',
                position: 'left',
                axisLine: {
                    lineStyle: {
                        color: '#E2E8F0'
                    }
                },
                axisLabel: {
                    color: '#64748B',
                    fontSize: 11
                }
            },
            {
                type: 'value',
                name: 'ÊπøÂ∫¶(%) / ÈôçÈõ®(mm)',
                position: 'right',
                axisLine: {
                    lineStyle: {
                        color: '#E2E8F0'
                    }
                },
                axisLabel: {
                    color: '#64748B',
                    fontSize: 11
                }
            }
        ],
        series: [
            {
                name: 'Ê∏©Â∫¶',
                type: 'line',
                smooth: true,
                symbol: 'circle',
                symbolSize: 4,
                yAxisIndex: 0,
                lineStyle: {
                    width: 3,
                    color: '#FF6B6B'
                },
                itemStyle: {
                    color: '#FF6B6B'
                },
                areaStyle: {
                    color: {
                        type: 'linear',
                        x: 0, y: 0, x2: 0, y2: 1,
                        colorStops: [
                            { offset: 0, color: 'rgba(255, 107, 107, 0.3)' },
                            { offset: 1, color: 'rgba(255, 107, 107, 0.1)' }
                        ]
                    }
                },
                data: temperatureData
            },
            {
                name: 'ÊπøÂ∫¶',
                type: 'line',
                smooth: true,
                symbol: 'circle',
                symbolSize: 4,
                yAxisIndex: 1,
                lineStyle: {
                    width: 3,
                    color: '#4ECDC4'
                },
                itemStyle: {
                    color: '#4ECDC4'
                },
                data: humidityData
            },
            {
                name: 'ÈôçÈõ®Èáè',
                type: 'bar',
                yAxisIndex: 1,
                itemStyle: {
                    color: '#45B7D1',
                    borderRadius: [2, 2, 0, 0]
                },
                data: rainfallData
            },
            {
                name: 'È£éÈÄü',
                type: 'line',
                smooth: true,
                symbol: 'circle',
                symbolSize: 4,
                yAxisIndex: 0,
                lineStyle: {
                    width: 3,
                    color: '#96CEB4'
                },
                itemStyle: {
                    color: '#96CEB4'
                },
                data: windspeedData
            }
        ]
    };
    
    charts.stationTrend.setOption(option);
}

/**
 * ÂØºÂá∫Ê∞îË±°Á´ôÊï∞ÊçÆ
 */
function exportStationData() {
    // Ëé∑ÂèñÂΩìÂâçÈÄâ‰∏≠ÁöÑÊ∞îË±°Á´ôIDÔºàÂèØ‰ª•‰ªéÊ®°ÊÄÅÊ°Ü‰∏≠Ëé∑ÂèñÔºâ
    const stationName = document.getElementById('detailStationName').textContent;
    showNotification(`ÂØºÂá∫ ${stationName} Êï∞ÊçÆÂäüËÉΩÂºÄÂèë‰∏≠...`, 'info');
}

/**
 * ÈÖçÁΩÆÊ∞îË±°Á´ô
 */
function configStation(stationId) {
    const station = stationData.find(s => s.id === stationId);
    if (!station) {
        showNotification('Ê∞îË±°Á´ô‰∏çÂ≠òÂú®', 'error');
        return;
    }
    
    showNotification(`ÈÖçÁΩÆÊ∞îË±°Á´ô: ${station.name}`, 'info');
}

/**
 * Áª¥Êä§Ê∞îË±°Á´ô
 */
function maintenanceStation(stationId) {
    const station = stationData.find(s => s.id === stationId);
    if (!station) {
        showNotification('Ê∞îË±°Á´ô‰∏çÂ≠òÂú®', 'error');
        return;
    }
    
    showNotification(`Áª¥Êä§Ê∞îË±°Á´ô: ${station.name}`, 'info');
}

// ===== Êï∞ÊçÆÊìç‰Ωú =====

/**
 * Êü•ÁúãÊï∞ÊçÆËØ¶ÊÉÖ
 */
function viewDataDetails(id) {
    const data = weatherData.find(item => item.id === id);
    if (!data) {
        showNotification('Êï∞ÊçÆ‰∏çÂ≠òÂú®', 'error');
        return;
    }
    
    showNotification(`Êü•ÁúãÊï∞ÊçÆËØ¶ÊÉÖ: ${data.stationName} ${data.datetime.toLocaleString()}`, 'info');
}

/**
 * ÂØºÂá∫Êï∞ÊçÆËÆ∞ÂΩï
 */
function exportDataRecord(id) {
    const data = weatherData.find(item => item.id === id);
    if (!data) {
        showNotification('Êï∞ÊçÆ‰∏çÂ≠òÂú®', 'error');
        return;
    }
    
    showNotification(`ÂØºÂá∫Êï∞ÊçÆËÆ∞ÂΩï: ${data.stationName}`, 'success');
}

/**
 * Âà†Èô§Êï∞ÊçÆËÆ∞ÂΩï
 */
function deleteDataRecord(id) {
    const data = weatherData.find(item => item.id === id);
    if (!data) {
        showNotification('Êï∞ÊçÆ‰∏çÂ≠òÂú®', 'error');
        return;
    }
    
    showConfirm(`Á°ÆÂÆöË¶ÅÂà†Èô§Êï∞ÊçÆËÆ∞ÂΩïÂêóÔºü\n\nÊ∞îË±°Á´ô: ${data.stationName}\nÊó∂Èó¥: ${data.datetime.toLocaleString()}`, () => {
        // ‰ªéÊï∞ÊçÆÂàóË°®‰∏≠ÁßªÈô§
        const index = weatherData.findIndex(item => item.id === id);
        if (index > -1) {
            weatherData.splice(index, 1);
        }
        
        const filteredIndex = filteredData.findIndex(item => item.id === id);
        if (filteredIndex > -1) {
            filteredData.splice(filteredIndex, 1);
        }
        
        selectedRows.delete(id);
        totalRecords = weatherData.length;
        
        renderQualityMonitor();
        
        showNotification('Êï∞ÊçÆËÆ∞ÂΩïÂ∑≤Âà†Èô§', 'success');
    });
}

// ===== ÂÖ∂‰ªñÂäüËÉΩ =====

/**
 * ÂàùÂßãÂåñËø∑‰Ω†ÂõæË°®
 */
function initializeMiniCharts() {
    const tempMiniChart = document.getElementById('tempMiniChart');
    const humidityMiniChart = document.getElementById('humidityMiniChart');
    
    if (tempMiniChart) {
        tempMiniChart.textContent = 'Ê∏©Â∫¶Ë∂ãÂäøÂõæ';
    }
    if (humidityMiniChart) {
        humidityMiniChart.textContent = 'ÊπøÂ∫¶Ë∂ãÂäøÂõæ';
    }
}

/**
 * ÂàáÊç¢Ë∂ãÂäøÂõæË°®ÊåáÊ†á
 */
let currentTrendMetric = 'temperature';

function switchTrendMetric(metric) {
    // Êõ¥Êñ∞ÊåâÈíÆÁä∂ÊÄÅ
    document.querySelectorAll('.trend-btn').forEach(btn => {
        btn.classList.remove('active');
    });
    event.target.classList.add('active');
    
    currentTrendMetric = metric;
    updateWeatherTrendChart(metric);
    
    showNotification(`Â∑≤ÂàáÊç¢Âà∞${getTrendMetricName(metric)}Ë∂ãÂäø`, 'info');
    console.log(`üìä ÂàáÊç¢Ë∂ãÂäøÂõæË°®Âà∞: ${metric}`);
}

function getTrendMetricName(metric) {
    const names = {
        temperature: 'Ê∏©Â∫¶',
        humidity: 'ÊπøÂ∫¶', 
        rainfall: 'ÈôçÈõ®',
        wind: 'È£éÈÄü'
    };
    return names[metric] || metric;
}

/**
 * ÂàáÊç¢‰æßËæπÊ†èÊòæÁ§∫/ÈöêËóè
 */
let sidebarCollapsed = false;

function toggleSidebar() {
    const sidebar = document.querySelector('.dashboard-sidebar');
    const toggleBtn = document.querySelector('.sidebar-toggle i');
    
    if (!sidebar || !toggleBtn) return;
    
    sidebarCollapsed = !sidebarCollapsed;
    
    if (sidebarCollapsed) {
        sidebar.style.width = '60px';
        sidebar.style.overflow = 'hidden';
        toggleBtn.className = 'fas fa-chevron-left';
        showNotification('‰æßËæπÊ†èÂ∑≤ÊäòÂè†', 'info');
    } else {
        sidebar.style.width = '320px';
        sidebar.style.overflow = 'visible';
        toggleBtn.className = 'fas fa-chevron-right';
        showNotification('‰æßËæπÊ†èÂ∑≤Â±ïÂºÄ', 'info');
    }
    
    console.log(`üì± ‰æßËæπÊ†è${sidebarCollapsed ? 'ÊäòÂè†' : 'Â±ïÂºÄ'}`);
}

/**
 * ÂØºÂá∫Ê∞îË±°Êä•Âëä
 */
function exportWeatherReport() {
    showNotification('Ê≠£Âú®ÁîüÊàêÊ∞îË±°Êä•Âëä...', 'info');
    
    // Ê®°ÊãüÊä•ÂëäÁîüÊàê
    setTimeout(() => {
        const reportData = {
            ÁîüÊàêÊó∂Èó¥: new Date().toLocaleString('zh-CN'),
            Ê∞îË±°Á´ôÊÄªÊï∞: stationData.length,
            Âú®Á∫øÊ∞îË±°Á´ô: stationData.filter(s => s.status === 'online').length,
            Âπ≥ÂùáÊ∏©Â∫¶: (stationData.reduce((sum, s) => sum + s.currentData.temperature, 0) / stationData.length).toFixed(1) + '¬∞C',
            Âπ≥ÂùáÊπøÂ∫¶: Math.round(stationData.reduce((sum, s) => sum + s.currentData.humidity, 0) / stationData.length) + '%',
            ÊÄªÈôçÈõ®Èáè: stationData.reduce((sum, s) => sum + s.currentData.rainfall, 0).toFixed(1) + 'mm',
            ÊúÄÂ§ßÈ£éÈÄü: Math.max(...stationData.map(s => s.currentData.windspeed)).toFixed(1) + 'm/s'
        };
        
        console.log('üìÑ Ê∞îË±°Êä•ÂëäÊï∞ÊçÆ:', reportData);
        showNotification('Ê∞îË±°Êä•ÂëäÁîüÊàêÊàêÂäü', 'success');
    }, 1500);
}

/**
 * Âà∑Êñ∞ÊâÄÊúâÊï∞ÊçÆ (ÁªºÂêàÁúãÊùøÁâàÊú¨)
 */
function refreshAllData() {
    showNotification('Ê≠£Âú®Âà∑Êñ∞Ê∞îË±°Êï∞ÊçÆ...', 'info');
    
    // ÈáçÊñ∞ÁîüÊàêÊ®°ÊãüÊï∞ÊçÆ
    generateMockData();
    
    // Âà∑Êñ∞ÁªºÂêàÁúãÊùø
    renderComprehensiveDashboard();
    renderQualityMonitor();
    
    // Êõ¥Êñ∞ÂõæË°®
    updateWeatherTrendChart(currentTrendMetric);
    
    showNotification('Ê∞îË±°Êï∞ÊçÆÂ∑≤Âà∑Êñ∞', 'success');
    console.log('üîÑ Ê∞îË±°Êï∞ÊçÆÂ∑≤Âà∑Êñ∞');
}

/**
 * ÂêëÂêéÂÖºÂÆπÁöÑrefreshDataÂáΩÊï∞
 */
function refreshData() {
    refreshAllData();
}



/**
 * ÊòæÁ§∫Ê∞îË±°Á´ôÁÆ°ÁêÜ
 */
function showStationManagement() {
    showNotification('Ê∞îË±°Á´ôÁÆ°ÁêÜÂäüËÉΩÂºÄÂèë‰∏≠...', 'info');
}





/**
 * Âà∑Êñ∞Ê∞îË±°Á´ôÁä∂ÊÄÅ
 */
function refreshStationStatus() {
    // Ê®°ÊãüÁä∂ÊÄÅÊõ¥Êñ∞
    stationData.forEach(station => {
        // ÈöèÊú∫Êõ¥Êñ∞ÈÉ®ÂàÜÊï∞ÊçÆ
        const data = station.currentData;
        data.temperature += (Math.random() - 0.5) * 2;
        data.humidity += (Math.random() - 0.5) * 5;
        data.rainfall = Math.random() * 2;
        data.windspeed += (Math.random() - 0.5) * 1;
        
        station.lastUpdate = new Date();
    });
    
    renderStationStatus();
    renderWeatherOverview();
    showNotification('Ê∞îË±°Á´ôÁä∂ÊÄÅÂ∑≤Êõ¥Êñ∞', 'success');
}

/**
 * ÊòæÁ§∫Ê∞îË±°Á´ôÂú∞Âõæ
 */
function showStationMap() {
    showNotification('Ê∞îË±°Á´ôÂú∞ÂõæÂäüËÉΩÂºÄÂèë‰∏≠...', 'info');
}

/**
 * Âà∑Êñ∞Ë¥®ÈáèÁä∂ÊÄÅ
 */
function refreshQualityStatus() {
    renderQualityMonitor();
    showNotification('Êï∞ÊçÆË¥®ÈáèÁä∂ÊÄÅÂ∑≤Êõ¥Êñ∞', 'success');
}

// ===== ÂÆûÊó∂Êõ¥Êñ∞ =====

/**
 * ÂºÄÂßãÂÆûÊó∂Êõ¥Êñ∞
 */
function startRealTimeUpdate() {
    // ÊØè5ÂàÜÈíüÊõ¥Êñ∞‰∏ÄÊ¨°Ëø∑‰Ω†ÂõæË°®
    setInterval(() => {
        Object.keys(charts).forEach(chartId => {
            if (chartId.includes('Chart') && chartId !== 'weatherTrend') {
                updateMiniChart(chartId);
            }
        });
    }, 5 * 60 * 1000);
    
    // ÊØè10ÂàÜÈíüÊõ¥Êñ∞‰∏ÄÊ¨°Ê¶ÇËßàÊï∞ÊçÆ
    setInterval(() => {
        renderWeatherOverview();
    }, 10 * 60 * 1000);
}

// ===== Â∑•ÂÖ∑ÂáΩÊï∞ =====

/**
 * Èò≤ÊäñÂáΩÊï∞ÔºàÂ¶ÇÊûúcommon.js‰∏≠Ê≤°ÊúâÂÆö‰πâÔºâ
 */
if (typeof debounce === 'undefined') {
    function debounce(func, wait) {
        let timeout;
        return function executedFunction(...args) {
            const later = () => {
                clearTimeout(timeout);
                func.apply(this, args);
            };
            clearTimeout(timeout);
            timeout = setTimeout(later, wait);
        };
    }
}







/**
 * Ëé∑ÂèñÊ∏©Â∫¶Ê†∑ÂºèÁ±ª
 */
function getTemperatureClass(temperature) {
    if (temperature < 0) return 'temp-freezing';
    if (temperature < 10) return 'temp-cold';
    if (temperature < 25) return 'temp-moderate';
    if (temperature < 35) return 'temp-warm';
    return 'temp-hot';
}

/**
 * Ëé∑ÂèñÊπøÂ∫¶Ê†∑ÂºèÁ±ª
 */
function getHumidityClass(humidity) {
    if (humidity < 30) return 'humidity-low';
    if (humidity < 60) return 'humidity-moderate';
    return 'humidity-high';
}

/**
 * Ëé∑ÂèñÈôçÈõ®ÈáèÊ†∑ÂºèÁ±ª
 */
function getRainfallClass(rainfall) {
    if (rainfall === 0) return 'rainfall-none';
    if (rainfall < 5) return 'rainfall-light';
    if (rainfall < 25) return 'rainfall-moderate';
    return 'rainfall-heavy';
}

/**
 * Ëé∑ÂèñË¥®ÈáèÊ†∑ÂºèÁ±ª
 */
function getQualityClass(quality) {
    if (quality >= 90) return 'quality-excellent';
    if (quality >= 80) return 'quality-good';
    if (quality >= 70) return 'quality-fair';
    if (quality >= 60) return 'quality-poor';
    return 'quality-bad';
}

/**
 * Ëé∑ÂèñË¥®ÈáèÁ≠âÁ∫ßÊñáÊú¨
 */
function getQualityText(quality) {
    if (quality >= 90) return '‰ºòÁßÄ';
    if (quality >= 80) return 'ËâØÂ•Ω';
    if (quality >= 70) return '‰∏ÄËà¨';
    if (quality >= 60) return 'ËæÉÂ∑Æ';
    return 'Â∑Æ';
}
 