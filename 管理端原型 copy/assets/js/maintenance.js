/**
 * ÂÜúÊÉÖÈÅ•ÊÑüÁ≥ªÁªüÁÆ°ÁêÜÁ´Ø - ËÆæÂ§áÁª¥Êä§ÁÆ°ÁêÜÂäüËÉΩ
 * ÂäüËÉΩÔºöÁª¥Êä§‰ªªÂä°ÁÆ°ÁêÜ„ÄÅÁª¥Êä§Êó•ÂéÜ„ÄÅÁª¥Êä§ÁªüËÆ°ÂàÜÊûêÁ≠â
 */

// ===== ÂÖ®Â±ÄÂèòÈáè =====
let maintenanceData = {
    tasks: [],
    statistics: {},
    alerts: []
};
let charts = {};
let currentPage = 1;
let pageSize = 20;
let totalRecords = 0;
let currentDate = new Date();

// ===== È°µÈù¢Âä†ËΩΩÂÆåÊàêÂêéÂàùÂßãÂåñ =====
document.addEventListener('DOMContentLoaded', function() {
    initializeMaintenancePage();
});

/**
 * È°µÈù¢ÂàùÂßãÂåñ
 */
function initializeMaintenancePage() {
    console.log('üîß ÂàùÂßãÂåñËÆæÂ§áÁª¥Êä§ÁÆ°ÁêÜÈ°µÈù¢...');
    
    // ÁîüÊàêÊ®°ÊãüÊï∞ÊçÆ
    generateMockMaintenanceData();
    
    // ÂàùÂßãÂåñÂõæË°®
    initializeMaintenanceCharts();
    
    // Ê∏≤ÊüìÈ°µÈù¢ÂÜÖÂÆπ
    renderMaintenanceOverview();
    renderMaintenanceCalendar();
    renderMaintenanceAlerts();
    renderMaintenanceTable();
    
    // ÁªëÂÆö‰∫ã‰ª∂
    bindMaintenanceEvents();
    
    console.log('‚úÖ ËÆæÂ§áÁª¥Êä§ÁÆ°ÁêÜÈ°µÈù¢ÂàùÂßãÂåñÂÆåÊàê');
}

// ===== Êï∞ÊçÆÁîüÊàêÂíåÁÆ°ÁêÜ =====

/**
 * ÁîüÊàêÊ®°ÊãüÁª¥Êä§Êï∞ÊçÆ
 */
function generateMockMaintenanceData() {
    // Áª¥Êä§‰ªªÂä°Êï∞ÊçÆ
    maintenanceData.tasks = [
        {
            id: 'maint_001',
            taskName: 'Ê∏©Â∫¶‰º†ÊÑüÂô®ÂÆöÊúüÊ†°ÂáÜ',
            deviceName: 'Ê∏©Â∫¶‰º†ÊÑüÂô®-001',
            deviceType: 'sensor',
            maintenanceType: 'preventive',
            priority: 'medium',
            status: 'scheduled',
            scheduledDate: new Date(2024, 0, 20, 9, 0),
            completedDate: null,
            assignee: 'Âº†Â∑•Á®ãÂ∏à',
            estimatedCost: 200,
            actualCost: null,
            content: 'ÂØπÊ∏©Â∫¶‰º†ÊÑüÂô®ËøõË°åÂÆöÊúüÊ†°ÂáÜÔºåÁ°Æ‰øùÊµãÈáèÁ≤æÂ∫¶',
            remarks: 'ÈúÄË¶ÅÊ†áÂáÜÊ∏©Â∫¶ËÆ°',
            createdDate: new Date(2024, 0, 10),
            lastUpdated: new Date(2024, 0, 15)
        },
        {
            id: 'maint_002',
            taskName: 'ÁõëÊéßÊëÑÂÉèÂ§¥Ê∏ÖÊ¥ÅÁª¥Êä§',
            deviceName: 'ÁõëÊéßÊëÑÂÉèÂ§¥-001',
            deviceType: 'camera',
            maintenanceType: 'preventive',
            priority: 'low',
            status: 'completed',
            scheduledDate: new Date(2024, 0, 15, 14, 0),
            completedDate: new Date(2024, 0, 15, 16, 30),
            assignee: 'ÊùéÊäÄÊúØÂëò',
            estimatedCost: 50,
            actualCost: 45,
            content: 'Ê∏ÖÊ¥ÅÊëÑÂÉèÂ§¥ÈïúÂ§¥ÔºåÊ£ÄÊü•ÊîØÊû∂Âõ∫ÂÆöÊÉÖÂÜµ',
            remarks: 'ÈïúÂ§¥ÊúâËΩªÂæÆÊ±°Ê∏ç',
            createdDate: new Date(2024, 0, 8),
            lastUpdated: new Date(2024, 0, 15)
        },
        {
            id: 'maint_003',
            taskName: 'Ê∞îË±°Á´ôÁ¥ßÊÄ•Áª¥‰øÆ',
            deviceName: 'Ê∞îË±°Á´ô-001',
            deviceType: 'weather',
            maintenanceType: 'emergency',
            priority: 'high',
            status: 'in-progress',
            scheduledDate: new Date(2024, 0, 18, 8, 0),
            completedDate: null,
            assignee: 'ÁéãÁª¥‰øÆÂëò',
            estimatedCost: 800,
            actualCost: null,
            content: 'È£éÈÄü‰º†ÊÑüÂô®ÊïÖÈöúÔºåÈúÄË¶ÅÊõ¥Êç¢‰º†ÊÑüÂô®Ê®°Âùó',
            remarks: 'ÂΩ±ÂìçÊ∞îË±°Êï∞ÊçÆÈááÈõÜ',
            createdDate: new Date(2024, 0, 17),
            lastUpdated: new Date(2024, 0, 18)
        },
        {
            id: 'maint_004',
            taskName: 'ÁΩëÁªúËÆæÂ§áÁ≥ªÁªüÂçáÁ∫ß',
            deviceName: 'ÁΩëÁªúË∑ØÁî±Âô®-001',
            deviceType: 'network',
            maintenanceType: 'upgrade',
            priority: 'medium',
            status: 'scheduled',
            scheduledDate: new Date(2024, 0, 25, 20, 0),
            completedDate: null,
            assignee: 'Èôà‰∏ªÁÆ°',
            estimatedCost: 0,
            actualCost: null,
            content: 'ÂçáÁ∫ßË∑ØÁî±Âô®Âõ∫‰ª∂Âà∞ÊúÄÊñ∞ÁâàÊú¨ÔºåÊèêÂçáÁΩëÁªúÂÆâÂÖ®ÊÄß',
            remarks: 'ÈúÄË¶ÅÂú®ÈùûÂ∑•‰ΩúÊó∂Èó¥ËøõË°å',
            createdDate: new Date(2024, 0, 12),
            lastUpdated: new Date(2024, 0, 16)
        },
        {
            id: 'maint_005',
            taskName: 'ÂúüÂ£§‰º†ÊÑüÂô®Êõ¥Êç¢ÁîµÊ±†',
            deviceName: 'ÂúüÂ£§‰º†ÊÑüÂô®-003',
            deviceType: 'sensor',
            maintenanceType: 'corrective',
            priority: 'high',
            status: 'scheduled',
            scheduledDate: new Date(2024, 0, 19, 10, 0),
            completedDate: null,
            assignee: 'Âº†Â∑•Á®ãÂ∏à',
            estimatedCost: 120,
            actualCost: null,
            content: 'Êõ¥Êç¢ÂúüÂ£§‰º†ÊÑüÂô®ÁîµÊ±†ÔºåÊ£ÄÊü•Êï∞ÊçÆ‰º†ËæìÂäüËÉΩ',
            remarks: 'ÁîµÊ±†ÁîµÈáè‰Ωé‰∫é10%',
            createdDate: new Date(2024, 0, 16),
            lastUpdated: new Date(2024, 0, 17)
        }
    ];
    
    // ÁªüËÆ°Êï∞ÊçÆ
    maintenanceData.statistics = {
        totalItems: 156,
        pendingMaintenance: 23,
        completedMaintenance: 89,
        maintenanceCost: 28560,
        typeDistribution: {
            preventive: 65,
            corrective: 45,
            emergency: 28,
            upgrade: 18
        }
    };
    
    // Áª¥Êä§ÊèêÈÜí
    maintenanceData.alerts = [
        {
            id: 'alert_001',
            type: 'urgent',
            title: 'Ê∞îË±°Á´ô-001ÈúÄË¶ÅÁ¥ßÊÄ•Áª¥‰øÆ',
            message: 'È£éÈÄü‰º†ÊÑüÂô®ÊïÖÈöúÔºåÂΩ±ÂìçÊï∞ÊçÆÈááÈõÜ',
            timestamp: new Date(Date.now() - 2 * 60 * 60 * 1000), // 2Â∞èÊó∂Ââç
            read: false,
            taskId: 'maint_003'
        },
        {
            id: 'alert_002',
            type: 'scheduled',
            title: 'Ê∏©Â∫¶‰º†ÊÑüÂô®-001ÂÆöÊúüÁª¥Êä§ÊèêÈÜí',
            message: 'ËÆ°ÂàíÁª¥Êä§Êó∂Èó¥ÔºöÊòéÂ§©‰∏äÂçà9:00',
            timestamp: new Date(Date.now() - 6 * 60 * 60 * 1000), // 6Â∞èÊó∂Ââç
            read: false,
            taskId: 'maint_001'
        },
        {
            id: 'alert_003',
            type: 'overdue',
            title: 'ÊπøÂ∫¶‰º†ÊÑüÂô®-002Áª¥Êä§ÈÄæÊúü',
            message: 'ËÆ°ÂàíÁª¥Êä§Êó∂Èó¥Â∑≤ËøáÊúü3Â§©',
            timestamp: new Date(Date.now() - 12 * 60 * 60 * 1000), // 12Â∞èÊó∂Ââç
            read: true,
            taskId: null
        }
    ];
    
    totalRecords = maintenanceData.tasks.length;
    
    console.log('üîß ÁîüÊàêËÆæÂ§áÁª¥Êä§Ê®°ÊãüÊï∞ÊçÆÂÆåÊàê');
}

// ===== ÂõæË°®ÂàùÂßãÂåñ =====

/**
 * ÂàùÂßãÂåñÁª¥Êä§ÂõæË°®
 */
function initializeMaintenanceCharts() {
    initializeMaintenanceTrendChart();
    initializeMaintenanceTypesChart();
}

/**
 * ÂàùÂßãÂåñÁª¥Êä§Ë∂ãÂäøÂõæË°®
 */
function initializeMaintenanceTrendChart() {
    const chartDom = document.getElementById('maintenanceTrendChart');
    if (!chartDom) return;
    
    charts.maintenanceTrend = echarts.init(chartDom);
    updateMaintenanceTrendChart();
}

/**
 * Êõ¥Êñ∞Áª¥Êä§Ë∂ãÂäøÂõæË°®
 */
function updateMaintenanceTrendChart() {
    if (!charts.maintenanceTrend) return;
    
    // ÁîüÊàêÊúÄËøë30Â§©ÁöÑÊ®°ÊãüÊï∞ÊçÆ
    const days = [];
    const scheduledData = [];
    const completedData = [];
    const costData = [];
    
    for (let i = 29; i >= 0; i--) {
        const date = new Date();
        date.setDate(date.getDate() - i);
        days.push(date.getDate() + 'Êó•');
        
        scheduledData.push(Math.floor(Math.random() * 8) + 2); // 2-10
        completedData.push(Math.floor(Math.random() * 6) + 1); // 1-7
        costData.push(Math.floor(Math.random() * 2000) + 500); // 500-2500
    }
    
    const option = {
        title: {
            show: false
        },
        tooltip: {
            trigger: 'axis',
            backgroundColor: 'rgba(50, 50, 50, 0.9)',
            borderColor: '#2E7D32',
            borderWidth: 1,
            textStyle: {
                color: '#fff',
                fontSize: 12
            }
        },
        legend: {
            data: ['ËÆ°ÂàíÁª¥Êä§', 'ÂÆåÊàêÁª¥Êä§', 'Áª¥Êä§Ë¥πÁî®'],
            textStyle: {
                color: '#718096',
                fontSize: 11
            }
        },
        grid: {
            left: '3%',
            right: '4%',
            bottom: '3%',
            top: '15%',
            containLabel: true
        },
        xAxis: {
            type: 'category',
            boundaryGap: false,
            data: days,
            axisLine: {
                lineStyle: {
                    color: '#E0E4E7'
                }
            },
            axisLabel: {
                color: '#718096',
                fontSize: 10
            }
        },
        yAxis: [
            {
                type: 'value',
                name: '‰ªªÂä°Êï∞Èáè',
                nameTextStyle: {
                    color: '#718096',
                    fontSize: 11
                },
                axisLine: {
                    lineStyle: {
                        color: '#E0E4E7'
                    }
                },
                axisLabel: {
                    color: '#718096',
                    fontSize: 11
                },
                splitLine: {
                    lineStyle: {
                        color: '#F0F2F5',
                        type: 'dashed'
                    }
                }
            },
            {
                type: 'value',
                name: 'Ë¥πÁî®(ÂÖÉ)',
                nameTextStyle: {
                    color: '#718096',
                    fontSize: 11
                },
                axisLine: {
                    lineStyle: {
                        color: '#E0E4E7'
                    }
                },
                axisLabel: {
                    color: '#718096',
                    fontSize: 11
                },
                splitLine: {
                    show: false
                }
            }
        ],
        series: [
            {
                name: 'ËÆ°ÂàíÁª¥Êä§',
                type: 'line',
                smooth: true,
                symbol: 'none',
                lineStyle: {
                    width: 3,
                    color: '#2E7D32'
                },
                areaStyle: {
                    color: {
                        type: 'linear',
                        x: 0, y: 0, x2: 0, y2: 1,
                        colorStops: [
                            { offset: 0, color: 'rgba(46, 125, 50, 0.3)' },
                            { offset: 1, color: 'rgba(46, 125, 50, 0.05)' }
                        ]
                    }
                },
                data: scheduledData
            },
            {
                name: 'ÂÆåÊàêÁª¥Êä§',
                type: 'line',
                smooth: true,
                symbol: 'none',
                lineStyle: {
                    width: 2,
                    color: '#4CAF50'
                },
                data: completedData
            },
            {
                name: 'Áª¥Êä§Ë¥πÁî®',
                type: 'bar',
                yAxisIndex: 1,
                barWidth: '20%',
                itemStyle: {
                    color: '#FF9800'
                },
                data: costData
            }
        ]
    };
    
    charts.maintenanceTrend.setOption(option);
}

/**
 * ÂàùÂßãÂåñÁª¥Êä§Á±ªÂûãÂàÜÂ∏ÉÂõæË°®
 */
function initializeMaintenanceTypesChart() {
    const chartDom = document.getElementById('maintenanceTypesChart');
    if (!chartDom) return;
    
    charts.maintenanceTypes = echarts.init(chartDom);
    updateMaintenanceTypesChart();
}

/**
 * Êõ¥Êñ∞Áª¥Êä§Á±ªÂûãÂàÜÂ∏ÉÂõæË°®
 */
function updateMaintenanceTypesChart() {
    if (!charts.maintenanceTypes) return;
    
    const typeNames = {
        preventive: 'È¢ÑÈò≤ÊÄßÁª¥Êä§',
        corrective: 'Á∫†Ê≠£ÊÄßÁª¥Êä§',
        emergency: 'Á¥ßÊÄ•Áª¥‰øÆ',
        upgrade: 'ËÆæÂ§áÂçáÁ∫ß'
    };
    
    const data = Object.entries(maintenanceData.statistics.typeDistribution).map(([key, value]) => ({
        name: typeNames[key],
        value: value
    }));
    
    const option = {
        title: {
            show: false
        },
        tooltip: {
            trigger: 'item',
            backgroundColor: 'rgba(50, 50, 50, 0.9)',
            borderColor: '#2E7D32',
            borderWidth: 1,
            textStyle: {
                color: '#fff',
                fontSize: 12
            },
            formatter: '{a} <br/>{b}: {c} ({d}%)'
        },
        legend: {
            orient: 'vertical',
            right: 10,
            top: 20,
            bottom: 20,
            textStyle: {
                color: '#718096',
                fontSize: 10
            }
        },
        series: [
            {
                name: 'Áª¥Êä§Á±ªÂûã',
                type: 'pie',
                radius: ['40%', '70%'],
                center: ['40%', '50%'],
                avoidLabelOverlap: false,
                itemStyle: {
                    borderRadius: 10,
                    borderColor: '#fff',
                    borderWidth: 2
                },
                label: {
                    show: false,
                    position: 'center'
                },
                emphasis: {
                    label: {
                        show: true,
                        fontSize: '14',
                        fontWeight: 'bold',
                        color: '#2E7D32'
                    }
                },
                labelLine: {
                    show: false
                },
                data: data,
                color: ['#2E7D32', '#4CAF50', '#FF9800', '#2196F3']
            }
        ]
    };
    
    charts.maintenanceTypes.setOption(option);
}

// ===== È°µÈù¢Ê∏≤Êüì =====

/**
 * Ê∏≤ÊüìÁª¥Êä§Ê¶ÇËßà
 */
function renderMaintenanceOverview() {
    const stats = maintenanceData.statistics;
    
    // Êõ¥Êñ∞ÁªüËÆ°Êï∞ÊçÆ
    updateElement('totalMaintenanceItems', stats.totalItems);
    updateElement('pendingMaintenance', stats.pendingMaintenance);
    updateElement('completedMaintenance', stats.completedMaintenance);
    updateElement('maintenanceCost', stats.maintenanceCost.toLocaleString());
    
    console.log('üîß Ê∏≤ÊüìÁª¥Êä§Ê¶ÇËßàÂÆåÊàê');
}

/**
 * Ê∏≤ÊüìÁª¥Êä§Êó•ÂéÜ
 */
function renderMaintenanceCalendar() {
    const calendarGrid = document.getElementById('calendarGrid');
    const currentMonthElement = document.getElementById('currentMonth');
    
    if (!calendarGrid || !currentMonthElement) return;
    
    // Êõ¥Êñ∞Êúà‰ªΩÊòæÁ§∫
    currentMonthElement.textContent = `${currentDate.getFullYear()}Âπ¥${currentDate.getMonth() + 1}Êúà`;
    
    // ÁîüÊàêÊó•ÂéÜ
    const year = currentDate.getFullYear();
    const month = currentDate.getMonth();
    const firstDay = new Date(year, month, 1);
    const lastDay = new Date(year, month + 1, 0);
    const startDate = new Date(firstDay);
    startDate.setDate(startDate.getDate() - firstDay.getDay());
    
    let calendarHTML = '<div class="calendar-weekdays">';
    const weekdays = ['Êó•', '‰∏Ä', '‰∫å', '‰∏â', 'Âõõ', '‰∫î', 'ÂÖ≠'];
    weekdays.forEach(day => {
        calendarHTML += `<div class="weekday">${day}</div>`;
    });
    calendarHTML += '</div><div class="calendar-days">';
    
    for (let i = 0; i < 42; i++) {
        const currentCalendarDate = new Date(startDate);
        currentCalendarDate.setDate(startDate.getDate() + i);
        
        const isCurrentMonth = currentCalendarDate.getMonth() === month;
        const isToday = currentCalendarDate.toDateString() === new Date().toDateString();
        
        // Ê£ÄÊü•ÂΩìÂ§©ÊòØÂê¶ÊúâÁª¥Êä§‰ªªÂä°
        const dayTasks = maintenanceData.tasks.filter(task => {
            const taskDate = new Date(task.scheduledDate);
            return taskDate.toDateString() === currentCalendarDate.toDateString();
        });
        
        let dayClass = 'calendar-day';
        if (!isCurrentMonth) dayClass += ' other-month';
        if (isToday) dayClass += ' today';
        
        let taskIndicators = '';
        dayTasks.forEach(task => {
            let indicatorClass = 'task-indicator ';
            if (task.status === 'completed') indicatorClass += 'completed';
            else if (task.maintenanceType === 'emergency') indicatorClass += 'urgent';
            else indicatorClass += 'scheduled';
            
            taskIndicators += `<span class="${indicatorClass}" title="${task.taskName}"></span>`;
        });
        
        calendarHTML += `
            <div class="${dayClass}" onclick="showDayTasks('${currentCalendarDate.toISOString()}')">
                <span class="day-number">${currentCalendarDate.getDate()}</span>
                <div class="task-indicators">${taskIndicators}</div>
            </div>
        `;
    }
    
    calendarHTML += '</div>';
    calendarGrid.innerHTML = calendarHTML;
    
    console.log('üîß Ê∏≤ÊüìÁª¥Êä§Êó•ÂéÜÂÆåÊàê');
}

/**
 * Ê∏≤ÊüìÁª¥Êä§ÊèêÈÜí
 */
function renderMaintenanceAlerts() {
    const alertsList = document.getElementById('alertsList');
    if (!alertsList) return;
    
    if (maintenanceData.alerts.length === 0) {
        alertsList.innerHTML = `
            <div class="empty-state">
                <i class="fas fa-bell-slash"></i>
                <h4>ÊöÇÊó†ÊèêÈÜí</h4>
                <p>ÂΩìÂâçÊ≤°ÊúâÈúÄË¶ÅÂÖ≥Ê≥®ÁöÑÁª¥Êä§ÊèêÈÜí</p>
            </div>
        `;
        return;
    }
    
    alertsList.innerHTML = maintenanceData.alerts.map(alert => {
        const alertTypeClass = {
            urgent: 'urgent',
            scheduled: 'scheduled',
            overdue: 'overdue'
        }[alert.type];
        
        const alertIcon = {
            urgent: 'fas fa-exclamation-circle',
            scheduled: 'fas fa-clock',
            overdue: 'fas fa-exclamation-triangle'
        }[alert.type];
        
        return `
            <div class="alert-item ${alertTypeClass} ${alert.read ? 'read' : ''}" 
                 onclick="handleAlertClick('${alert.id}')">
                <div class="alert-icon">
                    <i class="${alertIcon}"></i>
                </div>
                <div class="alert-content">
                    <h4 class="alert-title">${alert.title}</h4>
                    <p class="alert-message">${alert.message}</p>
                    <div class="alert-time">${formatTimeAgo(alert.timestamp)}</div>
                </div>
                <div class="alert-actions">
                    <button class="btn-icon btn-xs" onclick="event.stopPropagation(); markAlertRead('${alert.id}')" 
                            data-tooltip="Ê†áËÆ∞Â∑≤ËØª">
                        <i class="fas fa-check"></i>
                    </button>
                    <button class="btn-icon btn-xs" onclick="event.stopPropagation(); dismissAlert('${alert.id}')" 
                            data-tooltip="ÂøΩÁï•">
                        <i class="fas fa-times"></i>
                    </button>
                </div>
            </div>
        `;
    }).join('');
    
    console.log('üîß Ê∏≤ÊüìÁª¥Êä§ÊèêÈÜíÂÆåÊàê');
}

/**
 * Ê∏≤ÊüìÁª¥Êä§Ë°®Ê†º
 */
function renderMaintenanceTable() {
    const tbody = document.getElementById('maintenanceTableBody');
    if (!tbody) return;
    
    const startIndex = (currentPage - 1) * pageSize;
    const endIndex = Math.min(startIndex + pageSize, maintenanceData.tasks.length);
    const pageData = maintenanceData.tasks.slice(startIndex, endIndex);
    
    tbody.innerHTML = pageData.map(task => {
        const statusClass = getMaintenanceStatusClass(task.status);
        const statusText = getMaintenanceStatusText(task.status);
        const priorityClass = getPriorityClass(task.priority);
        const priorityText = getPriorityText(task.priority);
        const typeText = getMaintenanceTypeText(task.maintenanceType);
        
        return `
            <tr>
                <td>
                    <input type="checkbox" class="maintenance-checkbox" value="${task.id}">
                </td>
                <td>
                    <div class="task-name-cell">
                        <span onclick="showMaintenanceDetail('${task.id}')" class="link">${task.taskName}</span>
                    </div>
                </td>
                <td>${task.deviceName}</td>
                <td>
                    <span class="type-badge ${task.maintenanceType}">${typeText}</span>
                </td>
                <td>
                    <span class="priority-badge ${priorityClass}">${priorityText}</span>
                </td>
                <td>${formatDateTime(task.scheduledDate)}</td>
                <td>
                    <span class="badge badge-${statusClass}">${statusText}</span>
                </td>
                <td>${task.assignee}</td>
                <td>¬•${task.estimatedCost || 0}</td>
                <td>
                    <div class="action-buttons">
                        <button class="btn-icon btn-xs" onclick="showMaintenanceDetail('${task.id}')" data-tooltip="Êü•ÁúãËØ¶ÊÉÖ">
                            <i class="fas fa-eye"></i>
                        </button>
                        <button class="btn-icon btn-xs" onclick="editMaintenanceTask('${task.id}')" data-tooltip="ÁºñËæë">
                            <i class="fas fa-edit"></i>
                        </button>
                        <button class="btn-icon btn-xs" onclick="updateTaskStatus('${task.id}')" data-tooltip="Êõ¥Êñ∞Áä∂ÊÄÅ">
                            <i class="fas fa-check"></i>
                        </button>
                        <button class="btn-icon btn-xs" onclick="deleteMaintenanceTask('${task.id}')" data-tooltip="Âà†Èô§">
                            <i class="fas fa-trash"></i>
                        </button>
                    </div>
                </td>
            </tr>
        `;
    }).join('');
    
    // Êõ¥Êñ∞ÂàÜÈ°µ‰ø°ÊÅØ
    updateMaintenancePaginationInfo();
    
    console.log('üîß Ê∏≤ÊüìÁª¥Êä§Ë°®Ê†ºÂÆåÊàê');
}

// ===== Â∑•ÂÖ∑ÂáΩÊï∞ =====

/**
 * Êõ¥Êñ∞ÂÖÉÁ¥†ÂÜÖÂÆπ
 */
function updateElement(id, content) {
    const element = document.getElementById(id);
    if (element) {
        element.textContent = content;
    }
}

/**
 * Ëé∑ÂèñÁª¥Êä§Áä∂ÊÄÅÊ†∑ÂºèÁ±ª
 */
function getMaintenanceStatusClass(status) {
    const classes = {
        scheduled: 'info',
        'in-progress': 'warning',
        completed: 'success',
        cancelled: 'secondary'
    };
    return classes[status] || 'secondary';
}

/**
 * Ëé∑ÂèñÁª¥Êä§Áä∂ÊÄÅÊñáÊú¨
 */
function getMaintenanceStatusText(status) {
    const texts = {
        scheduled: 'Â∑≤ÊéíÊúü',
        'in-progress': 'ËøõË°å‰∏≠',
        completed: 'Â∑≤ÂÆåÊàê',
        cancelled: 'Â∑≤ÂèñÊ∂à'
    };
    return texts[status] || 'Êú™Áü•';
}

/**
 * Ëé∑Âèñ‰ºòÂÖàÁ∫ßÊ†∑ÂºèÁ±ª
 */
function getPriorityClass(priority) {
    const classes = {
        high: 'danger',
        medium: 'warning',
        low: 'success'
    };
    return classes[priority] || 'secondary';
}

/**
 * Ëé∑Âèñ‰ºòÂÖàÁ∫ßÊñáÊú¨
 */
function getPriorityText(priority) {
    const texts = {
        high: 'È´ò‰ºòÂÖàÁ∫ß',
        medium: '‰∏≠‰ºòÂÖàÁ∫ß',
        low: '‰Ωé‰ºòÂÖàÁ∫ß'
    };
    return texts[priority] || 'Êú™Áü•';
}

/**
 * Ëé∑ÂèñÁª¥Êä§Á±ªÂûãÊñáÊú¨
 */
function getMaintenanceTypeText(type) {
    const texts = {
        preventive: 'È¢ÑÈò≤ÊÄßÁª¥Êä§',
        corrective: 'Á∫†Ê≠£ÊÄßÁª¥Êä§',
        emergency: 'Á¥ßÊÄ•Áª¥‰øÆ',
        upgrade: 'ËÆæÂ§áÂçáÁ∫ß'
    };
    return texts[type] || 'Êú™Áü•';
}

/**
 * Ê†ºÂºèÂåñÊó•ÊúüÊó∂Èó¥
 */
function formatDateTime(date) {
    return date.toLocaleString('zh-CN', {
        year: 'numeric',
        month: '2-digit',
        day: '2-digit',
        hour: '2-digit',
        minute: '2-digit'
    });
}

/**
 * Ê†ºÂºèÂåñÊó∂Èó¥Â∑Æ
 */
function formatTimeAgo(date) {
    const now = new Date();
    const diff = now - date;
    
    const minutes = Math.floor(diff / 60000);
    const hours = Math.floor(diff / 3600000);
    const days = Math.floor(diff / 86400000);
    
    if (minutes < 1) return 'ÂàöÂàö';
    if (minutes < 60) return `${minutes}ÂàÜÈíüÂâç`;
    if (hours < 24) return `${hours}Â∞èÊó∂Ââç`;
    if (days < 30) return `${days}Â§©Ââç`;
    
    return date.toLocaleDateString('zh-CN');
}

/**
 * Êõ¥Êñ∞ÂàÜÈ°µ‰ø°ÊÅØ
 */
function updateMaintenancePaginationInfo() {
    const startIndex = (currentPage - 1) * pageSize + 1;
    const endIndex = Math.min(currentPage * pageSize, totalRecords);
    
    updateElement('maintenancePageStart', startIndex);
    updateElement('maintenancePageEnd', endIndex);
    updateElement('totalMaintenanceRecords', totalRecords);
}

// ===== ‰∫ã‰ª∂ÁªëÂÆö =====

/**
 * ÁªëÂÆöÁª¥Êä§ÁÆ°ÁêÜ‰∫ã‰ª∂
 */
function bindMaintenanceEvents() {
    // Á™óÂè£Â§ßÂ∞èÂèòÂåñÊó∂ÈáçÊñ∞Ë∞ÉÊï¥ÂõæË°®
    window.addEventListener('resize', debounce(() => {
        Object.values(charts).forEach(chart => {
            if (chart && chart.resize) {
                chart.resize();
            }
        });
    }, 200));
    
    // Êñá‰ª∂ÊãñÊãΩ‰∏ä‰º†
    const fileUploadArea = document.querySelector('.file-upload-area');
    if (fileUploadArea) {
        fileUploadArea.addEventListener('dragover', handleDragOver);
        fileUploadArea.addEventListener('drop', handleFileDrop);
    }
}

/**
 * Â§ÑÁêÜÊñá‰ª∂ÊãñÊãΩÊÇ¨ÂÅú
 */
function handleDragOver(e) {
    e.preventDefault();
    e.target.classList.add('drag-over');
}

/**
 * Â§ÑÁêÜÊñá‰ª∂ÊãñÊãΩÊîæÁΩÆ
 */
function handleFileDrop(e) {
    e.preventDefault();
    e.target.classList.remove('drag-over');
    
    const files = e.dataTransfer.files;
    handleMaintenanceFiles(files);
}

/**
 * Â§ÑÁêÜÁª¥Êä§Êñá‰ª∂ÈÄâÊã©
 */
function handleMaintenanceFileSelect(event) {
    const files = event.target.files;
    handleMaintenanceFiles(files);
}

/**
 * Â§ÑÁêÜÁª¥Êä§Êñá‰ª∂
 */
function handleMaintenanceFiles(files) {
    const selectedFilesContainer = document.getElementById('selectedMaintenanceFiles');
    if (!selectedFilesContainer) return;
    
    selectedFilesContainer.innerHTML = '';
    
    Array.from(files).forEach(file => {
        const fileItem = document.createElement('div');
        fileItem.className = 'file-item';
        fileItem.innerHTML = `
            <div class="file-info">
                <i class="fas fa-file"></i>
                <span class="file-name">${file.name}</span>
                <span class="file-size">(${formatFileSize(file.size)})</span>
            </div>
            <button class="btn-icon btn-xs" onclick="removeMaintenanceFile(this)">
                <i class="fas fa-times"></i>
            </button>
        `;
        selectedFilesContainer.appendChild(fileItem);
    });
}

/**
 * ÁßªÈô§Áª¥Êä§Êñá‰ª∂
 */
function removeMaintenanceFile(button) {
    button.parentElement.remove();
}

/**
 * Ê†ºÂºèÂåñÊñá‰ª∂Â§ßÂ∞è
 */
function formatFileSize(bytes) {
    if (bytes === 0) return '0 Bytes';
    const k = 1024;
    const sizes = ['Bytes', 'KB', 'MB', 'GB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
}

// ===== ÂäüËÉΩÂáΩÊï∞ =====

/**
 * ÊòæÁ§∫Ê∑ªÂä†Áª¥Êä§‰ªªÂä°Ê®°ÊÄÅÊ°Ü
 */
function showAddMaintenanceModal() {
    const modal = document.getElementById('addMaintenanceModal');
    if (modal) {
        // ËÆæÁΩÆÈªòËÆ§Êó∂Èó¥
        const now = new Date();
        const tomorrow = new Date(now.getTime() + 24 * 60 * 60 * 1000);
        document.getElementById('scheduledStartDate').value = tomorrow.toISOString().slice(0, 16);
        
        modal.classList.add('show');
    }
}

/**
 * ÂÖ≥Èó≠Ê∑ªÂä†Áª¥Êä§‰ªªÂä°Ê®°ÊÄÅÊ°Ü
 */
function closeAddMaintenanceModal() {
    const modal = document.getElementById('addMaintenanceModal');
    if (modal) {
        modal.classList.remove('show');
    }
}

/**
 * ‰øùÂ≠òÁª¥Êä§‰ªªÂä°
 */
function saveMaintenanceTask() {
    const form = document.getElementById('addMaintenanceForm');
    
    // È™åËØÅË°®Âçï
    const taskName = document.getElementById('taskName').value;
    const maintenanceType = document.getElementById('maintenanceType').value;
    const deviceName = document.getElementById('deviceName').value;
    const priority = document.getElementById('priority').value;
    const scheduledStartDate = document.getElementById('scheduledStartDate').value;
    const assignee = document.getElementById('assignee').value;
    const maintenanceContent = document.getElementById('maintenanceContent').value;
    
    if (!taskName || !maintenanceType || !deviceName || !priority || !scheduledStartDate || !assignee || !maintenanceContent) {
        showNotification('ËØ∑Â°´ÂÜôÂøÖÂ°´Â≠óÊÆµ', 'warning');
        return;
    }
    
    showNotification('Ê≠£Âú®‰øùÂ≠òÁª¥Êä§‰ªªÂä°...', 'info');
    
    // Ê®°Êãü‰øùÂ≠òËøáÁ®ã
    setTimeout(() => {
        const newTask = {
            id: 'maint_' + Date.now(),
            taskName: taskName,
            deviceName: deviceName,
            deviceType: 'sensor', // Ê†πÊçÆËÆæÂ§áÂêçÁß∞Êé®Êñ≠
            maintenanceType: maintenanceType,
            priority: priority,
            status: 'scheduled',
            scheduledDate: new Date(scheduledStartDate),
            completedDate: null,
            assignee: assignee,
            estimatedCost: parseFloat(document.getElementById('estimatedCost').value) || 0,
            actualCost: null,
            content: maintenanceContent,
            remarks: document.getElementById('remarks').value || '',
            createdDate: new Date(),
            lastUpdated: new Date()
        };
        
        maintenanceData.tasks.unshift(newTask);
        totalRecords = maintenanceData.tasks.length;
        
        renderMaintenanceTable();
        renderMaintenanceCalendar();
        closeAddMaintenanceModal();
        showNotification('Áª¥Êä§‰ªªÂä°‰øùÂ≠òÊàêÂäü', 'success');
    }, 2000);
}

/**
 * ÊòæÁ§∫Áª¥Êä§‰ªªÂä°ËØ¶ÊÉÖ
 */
function showMaintenanceDetail(taskId) {
    const task = maintenanceData.tasks.find(t => t.id === taskId);
    if (!task) return;
    
    const modal = document.getElementById('maintenanceDetailModal');
    const content = document.getElementById('maintenanceDetailContent');
    
    if (modal && content) {
        content.innerHTML = `
            <div class="maintenance-detail-layout">
                <div class="task-basic-info">
                    <div class="info-header">
                        <h4>${task.taskName}</h4>
                        <div class="task-badges">
                            <span class="badge badge-${getMaintenanceStatusClass(task.status)}">${getMaintenanceStatusText(task.status)}</span>
                            <span class="priority-badge ${getPriorityClass(task.priority)}">${getPriorityText(task.priority)}</span>
                        </div>
                    </div>
                    
                    <div class="info-grid">
                        <div class="info-section">
                            <h5>Âü∫Êú¨‰ø°ÊÅØ</h5>
                            <div class="info-items">
                                <div class="info-item">
                                    <label>ËÆæÂ§áÂêçÁß∞:</label>
                                    <span>${task.deviceName}</span>
                                </div>
                                <div class="info-item">
                                    <label>Áª¥Êä§Á±ªÂûã:</label>
                                    <span>${getMaintenanceTypeText(task.maintenanceType)}</span>
                                </div>
                                <div class="info-item">
                                    <label>Ë¥üË¥£‰∫∫:</label>
                                    <span>${task.assignee}</span>
                                </div>
                                <div class="info-item">
                                    <label>ËÆ°ÂàíÊó∂Èó¥:</label>
                                    <span>${formatDateTime(task.scheduledDate)}</span>
                                </div>
                                ${task.completedDate ? `
                                    <div class="info-item">
                                        <label>ÂÆåÊàêÊó∂Èó¥:</label>
                                        <span>${formatDateTime(task.completedDate)}</span>
                                    </div>
                                ` : ''}
                            </div>
                        </div>
                        
                        <div class="info-section">
                            <h5>Ë¥πÁî®‰ø°ÊÅØ</h5>
                            <div class="info-items">
                                <div class="info-item">
                                    <label>È¢Ñ‰º∞Ë¥πÁî®:</label>
                                    <span>¬•${task.estimatedCost || 0}</span>
                                </div>
                                ${task.actualCost !== null ? `
                                    <div class="info-item">
                                        <label>ÂÆûÈôÖË¥πÁî®:</label>
                                        <span>¬•${task.actualCost}</span>
                                    </div>
                                ` : ''}
                            </div>
                        </div>
                    </div>
                </div>
                
                <div class="task-content">
                    <div class="content-section">
                        <h5>Áª¥Êä§ÂÜÖÂÆπ</h5>
                        <p>${task.content}</p>
                    </div>
                    
                    ${task.remarks ? `
                        <div class="content-section">
                            <h5>Â§áÊ≥®‰ø°ÊÅØ</h5>
                            <p>${task.remarks}</p>
                        </div>
                    ` : ''}
                </div>
                
                <div class="task-timeline">
                    <h5>‰ªªÂä°Êó∂Èó¥Á∫ø</h5>
                    <div class="timeline-items">
                        <div class="timeline-item">
                            <div class="timeline-dot created"></div>
                            <div class="timeline-content">
                                <div class="timeline-title">‰ªªÂä°ÂàõÂª∫</div>
                                <div class="timeline-time">${formatDateTime(task.createdDate)}</div>
                            </div>
                        </div>
                        
                        <div class="timeline-item">
                            <div class="timeline-dot scheduled"></div>
                            <div class="timeline-content">
                                <div class="timeline-title">‰ªªÂä°ÊéíÊúü</div>
                                <div class="timeline-time">${formatDateTime(task.scheduledDate)}</div>
                            </div>
                        </div>
                        
                        ${task.completedDate ? `
                            <div class="timeline-item">
                                <div class="timeline-dot completed"></div>
                                <div class="timeline-content">
                                    <div class="timeline-title">‰ªªÂä°ÂÆåÊàê</div>
                                    <div class="timeline-time">${formatDateTime(task.completedDate)}</div>
                                </div>
                            </div>
                        ` : ''}
                    </div>
                </div>
            </div>
        `;
        modal.classList.add('show');
    }
}

/**
 * ÂÖ≥Èó≠Áª¥Êä§‰ªªÂä°ËØ¶ÊÉÖÊ®°ÊÄÅÊ°Ü
 */
function closeMaintenanceDetailModal() {
    const modal = document.getElementById('maintenanceDetailModal');
    if (modal) {
        modal.classList.remove('show');
    }
}

/**
 * Êó•ÂéÜÂØºËà™ÂáΩÊï∞
 */
function prevMonth() {
    currentDate.setMonth(currentDate.getMonth() - 1);
    renderMaintenanceCalendar();
}

function nextMonth() {
    currentDate.setMonth(currentDate.getMonth() + 1);
    renderMaintenanceCalendar();
}

function goToToday() {
    currentDate = new Date();
    renderMaintenanceCalendar();
}

/**
 * ÊòæÁ§∫ÊüêÂ§©ÁöÑÁª¥Êä§‰ªªÂä°
 */
function showDayTasks(dateString) {
    const date = new Date(dateString);
    const dayTasks = maintenanceData.tasks.filter(task => {
        const taskDate = new Date(task.scheduledDate);
        return taskDate.toDateString() === date.toDateString();
    });
    
    if (dayTasks.length === 0) {
        showNotification(`${date.getMonth() + 1}Êúà${date.getDate()}Êó•ÊöÇÊó†Áª¥Êä§‰ªªÂä°`, 'info');
        return;
    }
    
    const taskList = dayTasks.map(task => `‚Ä¢ ${task.taskName}`).join('<br>');
    showNotification(`${date.getMonth() + 1}Êúà${date.getDate()}Êó•Áª¥Êä§‰ªªÂä°Ôºö<br>${taskList}`, 'info');
}

/**
 * Â§ÑÁêÜÊèêÈÜíÁÇπÂáª
 */
function handleAlertClick(alertId) {
    const alert = maintenanceData.alerts.find(a => a.id === alertId);
    if (alert && alert.taskId) {
        showMaintenanceDetail(alert.taskId);
    }
}

/**
 * Ê†áËÆ∞ÊèêÈÜíÂ∑≤ËØª
 */
function markAlertRead(alertId) {
    const alert = maintenanceData.alerts.find(a => a.id === alertId);
    if (alert) {
        alert.read = true;
        renderMaintenanceAlerts();
        showNotification('ÊèêÈÜíÂ∑≤Ê†áËÆ∞‰∏∫Â∑≤ËØª', 'success');
    }
}

/**
 * ÂøΩÁï•ÊèêÈÜí
 */
function dismissAlert(alertId) {
    const index = maintenanceData.alerts.findIndex(a => a.id === alertId);
    if (index > -1) {
        maintenanceData.alerts.splice(index, 1);
        renderMaintenanceAlerts();
        showNotification('ÊèêÈÜíÂ∑≤ÂøΩÁï•', 'success');
    }
}

/**
 * Ê†áËÆ∞ÊâÄÊúâÊèêÈÜíÂ∑≤ËØª
 */
function markAllAlertsRead() {
    maintenanceData.alerts.forEach(alert => {
        alert.read = true;
    });
    renderMaintenanceAlerts();
    showNotification('ÊâÄÊúâÊèêÈÜíÂ∑≤Ê†áËÆ∞‰∏∫Â∑≤ËØª', 'success');
}

/**
 * ÈÖçÁΩÆÊèêÈÜí
 */
function configureAlerts() {
    showNotification('ÊèêÈÜíÈÖçÁΩÆÂäüËÉΩÂºÄÂèë‰∏≠...', 'info');
}

/**
 * Âà∑Êñ∞ÊèêÈÜí
 */
function refreshAlerts() {
    renderMaintenanceAlerts();
    showNotification('ÊèêÈÜíÂ∑≤Âà∑Êñ∞', 'info');
}

/**
 * ÂõæË°®ÊéßÂà∂ÂáΩÊï∞
 */
function setMaintenanceTimeRange(range) {
    // Êõ¥Êñ∞Êó∂Èó¥ËåÉÂõ¥ÊåâÈíÆÁä∂ÊÄÅ
    document.querySelectorAll('.time-btn').forEach(btn => {
        btn.classList.remove('active');
    });
    event.target.classList.add('active');
    
    updateMaintenanceTrendChart();
    
    const rangeNames = {
        month: 'Êú¨Êúà',
        quarter: 'Êú¨Â≠£',
        year: 'Êú¨Âπ¥'
    };
    
    showNotification(`Â∑≤ÂàáÊç¢Âà∞${rangeNames[range]}ËßÜÂõæ`, 'info');
}

function refreshMaintenanceTypes() {
    updateMaintenanceTypesChart();
    showNotification('Áª¥Êä§Á±ªÂûãÂõæË°®Â∑≤Âà∑Êñ∞', 'info');
}

function exportMaintenanceChart() {
    showNotification('Ê≠£Âú®ÂØºÂá∫Áª¥Êä§ÁªüËÆ°ÂõæË°®...', 'info');
}

/**
 * Á≠õÈÄâÂíåÊâπÈáèÊìç‰ΩúÂáΩÊï∞
 */
function applyMaintenanceFilters() {
    showNotification('Á≠õÈÄâÂäüËÉΩÂºÄÂèë‰∏≠...', 'info');
}

function clearMaintenanceFilters() {
    // ÈáçÁΩÆÊâÄÊúâÁ≠õÈÄâÂô®
    document.querySelectorAll('#maintenanceTypeFilter, #maintenanceStatusFilter, #deviceTypeFilter, #priorityFilter').forEach(select => {
        select.value = '';
    });
    showNotification('Á≠õÈÄâÊù°‰ª∂Â∑≤Ê∏ÖÈô§', 'info');
}

function batchSchedule() {
    showNotification('ÊâπÈáèÊéíÊúüÂäüËÉΩÂºÄÂèë‰∏≠...', 'info');
}

function batchComplete() {
    showNotification('ÊâπÈáèÂÆåÊàêÂäüËÉΩÂºÄÂèë‰∏≠...', 'info');
}

function batchExportMaintenance() {
    showNotification('ÊâπÈáèÂØºÂá∫ÂäüËÉΩÂºÄÂèë‰∏≠...', 'info');
}

/**
 * Ë°®Ê†ºËßÜÂõæÂàáÊç¢
 */
function toggleMaintenanceView(viewType) {
    const viewNames = {
        timeline: 'Êó∂Èó¥Á∫øËßÜÂõæ',
        kanban: 'ÁúãÊùøËßÜÂõæ',
        table: 'Ë°®Ê†ºËßÜÂõæ'
    };
    
    showNotification(`ÂàáÊç¢Âà∞${viewNames[viewType]}ÂäüËÉΩÂºÄÂèë‰∏≠...`, 'info');
}

/**
 * Áª¥Êä§‰ªªÂä°Êìç‰ΩúÂáΩÊï∞
 */
function editMaintenanceTask(taskId) {
    showNotification('ÁºñËæëÁª¥Êä§‰ªªÂä°ÂäüËÉΩÂºÄÂèë‰∏≠...', 'info');
}

function updateTaskStatus(taskId) {
    const task = maintenanceData.tasks.find(t => t.id === taskId);
    if (task) {
        // ÁÆÄÂçïÁöÑÁä∂ÊÄÅÂàáÊç¢ÈÄªËæë
        if (task.status === 'scheduled') {
            task.status = 'in-progress';
        } else if (task.status === 'in-progress') {
            task.status = 'completed';
            task.completedDate = new Date();
        }
        
        renderMaintenanceTable();
        showNotification(`‰ªªÂä°Áä∂ÊÄÅÂ∑≤Êõ¥Êñ∞‰∏∫Ôºö${getMaintenanceStatusText(task.status)}`, 'success');
    }
}

function deleteMaintenanceTask(taskId) {
    const task = maintenanceData.tasks.find(t => t.id === taskId);
    if (task) {
        showConfirm(`Á°ÆÂÆöË¶ÅÂà†Èô§Áª¥Êä§‰ªªÂä° "${task.taskName}" ÂêóÔºü`, () => {
            const index = maintenanceData.tasks.findIndex(t => t.id === taskId);
            if (index > -1) {
                maintenanceData.tasks.splice(index, 1);
                totalRecords = maintenanceData.tasks.length;
                renderMaintenanceTable();
                renderMaintenanceCalendar();
                showNotification('Áª¥Êä§‰ªªÂä°Âà†Èô§ÊàêÂäü', 'success');
            }
        });
    }
}

function updateMaintenanceStatus() {
    showNotification('Êõ¥Êñ∞Áä∂ÊÄÅÂäüËÉΩÂºÄÂèë‰∏≠...', 'info');
}

/**
 * ÂÖ∂‰ªñÂäüËÉΩÂáΩÊï∞
 */
function generateMaintenanceReport() {
    showNotification('Ê≠£Âú®ÁîüÊàêÁª¥Êä§Êä•Âëä...', 'info');
    
    setTimeout(() => {
        showNotification('Áª¥Êä§Êä•ÂëäÁîüÊàêÂÆåÊàê', 'success');
    }, 2000);
}

function scheduleMaintenanceBatch() {
    showNotification('ÊâπÈáèÊéíÊúüÂäüËÉΩÂºÄÂèë‰∏≠...', 'info');
}

/**
 * ÂàáÊç¢ÂÖ®ÈÄâ
 */
function toggleSelectAllMaintenance() {
    const selectAll = document.getElementById('selectAllMaintenance');
    const checkboxes = document.querySelectorAll('.maintenance-checkbox');
    
    checkboxes.forEach(checkbox => {
        checkbox.checked = selectAll.checked;
    });
}

// ===== ÂàÜÈ°µÂáΩÊï∞ =====

/**
 * ÂàáÊç¢È°µÈù¢
 */
function changeMaintenancePage(action) {
    const totalPages = Math.ceil(totalRecords / pageSize);
    
    switch (action) {
        case 'first':
            currentPage = 1;
            break;
        case 'prev':
            if (currentPage > 1) currentPage--;
            break;
        case 'next':
            if (currentPage < totalPages) currentPage++;
            break;
        case 'last':
            currentPage = totalPages;
            break;
        default:
            if (typeof action === 'number') {
                currentPage = action;
            }
    }
    
    renderMaintenanceTable();
}

// ===== Â∑•ÂÖ∑ÂáΩÊï∞ =====

/**
 * Èò≤ÊäñÂáΩÊï∞ÔºàÂ¶ÇÊûúcommon.js‰∏≠Ê≤°ÊúâÂÆö‰πâÔºâ
 */
if (typeof debounce === 'undefined') {
    function debounce(func, wait) {
        let timeout;
        return function executedFunction(...args) {
            const later = () => {
                clearTimeout(timeout);
                func.apply(this, args);
            };
            clearTimeout(timeout);
            timeout = setTimeout(later, wait);
        };
    }
}
 
 
 
 
 
 
 
 
 